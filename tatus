[1mdiff --cc CCRing.c[m
[1mindex 97c9cfb,20f68d2..0000000[m
[1m--- a/CCRing.c[m
[1m+++ b/CCRing.c[m
[36m@@@ -1,8 -1,10 +1,9 @@@[m
  #include <stdlib.h>[m
  #include <string.h> // memset[m
[31m- #include "CCRing.h"[m
  #include <stdio.h>[m
[31m- [m
[32m+ #include <math.h>[m
[32m+ #include "CCRing.h"[m
[31m -[m
[32m+ #define PI 3.14159265[m
  [m
  CCRing* createRing(unsigned long length) {[m
  [m
[36m@@@ -36,26 -41,46 +40,34 @@@[m [mCCError freeRing(CCRing* pRing) [m
    return ccNoError;[m
  }[m
  [m
[32m+ CCError ccAppend(CCRing* pRing, ccAudioDataType arr[], unsigned long length) {[m
[32m+   for (unsigned long i = 0; i < length; i++) {[m
[32m+     (pRing->index)++;[m
[32m+     if ((pRing->index) >= (pRing->length)){[m
[32m+       pRing->index = 0;[m
[32m+     }[m
[32m+     *(pRing->data + pRing->index) = *(arr + i);[m
[32m+   }[m
[32m+   return ccNoError;[m
[32m+ }[m
  [m
[31m- int ccAppend(CCRing* ring, ccAudioDataType array[], unsigned long length) {[m
[32m++/*unsigned long ccValidLen(CCRing* ring, unsigned long tap) {[m
[32m++  // Last position appended[m
[32m++  unsigned long append_index = ring->index_ring;[m
[32m++}*/[m
  [m
[31m-    unsigned long index = ring->index_ring - ring->length;[m
[32m+ CCError ccGenerateSin(CCRing* sinusoid, double cycles) {[m
[32m+   unsigned long length = sinusoid->length;[m
[32m+   double distBetweenPoints = (2*PI)/length;[m
  [m
[31m-    for (unsigned long i = 0; i < length; ++i) {[m
[31m-       unsigned long n = (index + i) % ring->length;[m
[31m-       ring->data[n] = array[i];[m
[32m+   ccAudioDataType dataPoints[length];[m
[32m+   for (unsigned long i = 0; i < length; ++i) {[m
[32m+     double n = i * distBetweenPoints;[m
[32m+     dataPoints[i] = sin(cycles * n);[m
[32m+   }[m
  [m
[31m-       if (i==(length - 1) ){[m
[31m-         index = ((index + i + 1) % ring->length);[m
[31m-         ring->index_ring = index + ring->length;[m
[31m-       }[m
[31m-    }[m
[31m-   return 1;[m
[31m- }[m
[32m+   ccAppend(sinusoid, dataPoints, length);[m
  [m
[31m- unsigned long ccValidLen(CCRing* ring, unsigned long tap) {[m
[31m-   // Last position appended[m
[31m-   unsigned long append_index = ring->index_ring;[m
[31m-   [m
[31m -  /************************* PRINT STATEMENTS *************************[m
[31m -  printf("%f\n\n", distBetweenPoints);[m
[31m -  for (unsigned long i = 0; i < length; i++) {[m
[31m -    printf("%f\n", dataPoints[i]);[m
[31m -  }[m
[31m -  printf("\n");[m
[31m -  for (unsigned long i = 0; i < length; i++) {[m
[31m -    printf("%f\n", *(sinusoid->data + i));[m
[31m -  }[m
[31m -  printf("\n");[m
[31m - ?hgf[m
[31m - ;lkjhg'[m
[31m - ';lkjl;lklkllljlkjhgfdsasdfghjkl;'[m
[31m - *******************************************************************/[m
[31m -[m
[32m+   return ccNoError;[m
[32m+ }[m
  [m
[31m- }[m
[31m -[m
[1mdiff --cc include/CCRing.h[m
[1mindex c334593,4cfb3be..0000000[m
[1m--- a/include/CCRing.h[m
[1m+++ b/include/CCRing.h[m
[36m@@@ -42,8 -39,11 +39,13 @@@[m [mCCError freeRing(CCRing* pRing)[m
  records a pointer where the last change was made to the Ring[m
  and appends at the position of the pointer with each new[m
  append. */[m
[31m- int ccAppend(CCRing* ring, ccAudioDataType array[], unsigned long length);[m
[32m+ CCError ccAppend(CCRing* pRing, ccAudioDataType arr[], unsigned long length);[m
[32m+ [m
[32m+ /* ccGenerateSin takes in a pointer to a CCRing, and the # of cycles[m
[32m+ for the resulting standard sinusoid (A = 1, phi = 0). It returns evenly [m
[32m+ spaced sin data points for each index in the Ring. */[m
[32m+ CCError ccGenerateSin(CCRing* ring, double cycles);[m
  [m
[31m- unsigned long ccValidLen(CCRing* ring, unsigned long tap)[m
[32m++/*unsigned long ccValidLen(CCRing* ring, unsigned long tap)*/[m
[32m +[m
  #endif[m
[1mdiff --git a/Makefile b/Makefile[m
[1mindex e06ec76..9b56cd6 100644[m
[1m--- a/Makefile[m
[1m+++ b/Makefile[m
[36m@@ -84,7 +84,7 @@[m [mbin/pass : $(O_FILES)[m
 # and a %.h file. Example usage:[m
 # $ make testCCRing[m
 bin/test% : $(O_DIR)/test%.o $(O_DIR)/%.o $(I_DIR)/%.h[m
[31m-	$(CC) -o ./bin/test$* $< $(O_DIR)/$*.o $(CFLAGS) -L$(CUNIT_LIB_DIR) -lcunit[m
[32m+[m	[32m$(CC) -o ./bin/test$* $< $(O_DIR)/$*.o $(CFLAGS) -L$(CUNIT_LIB_DIR) -lcunit -lm[m
 [m
 tests: $(patsubst %, bin/%, $(TESTS))[m
 [m
